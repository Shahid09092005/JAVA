class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> li = new ArrayList<>();
        Arrays.sort(nums); //sort the array
        int n=nums.length;
        for(int i=0;i<n-3;i++){
            if (i > 0 && nums[i] == nums[i - 1]) continue; // duplicate found then i++
            for(int j=i+1;j<n-2;j++){
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // same for j++
                long req = (long)target - (long)(nums[i] + nums[j]); // use long to avoid overflow
                int l=j+1;
                int h=n-1;
                while(l<h){
                     long sum = (long)nums[l] + (long)nums[h];  // use long to handle large sums
                    if(req==sum){
                        List<Integer> quad = Arrays.asList(nums[i], nums[j], nums[l], nums[h]);
                        li.add(quad);
                         // Skip duplicates for l and h
                        while (l < h && nums[l] == nums[l + 1]) l++;
                        while (l < h && nums[h] == nums[h - 1]) h--;
                        l++;
                        h--;
                    }else if(nums[l]+nums[h]<req){
                        l++;
                    }else if(nums[l]+nums[h]>req){
                        h--;
                    }
                }
            }
        }
        return li;
        
    }
}
